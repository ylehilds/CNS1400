         Random Numbers
There are times when it is necessary to simulate some kind of random event in a program. For example, if you wanted a program to model a board game that uses dice to determine events in the game, you would have to simulate the roll of the dice. The number that comes up on a roll of the dice is random, because you can't predict what number will come up next. The C++ standard library has a function built into it that generates Pseudo-Random Numbers. They are called pseudo-random numbers because they are not truly random. The rand( ) fucntion generates a pseudo-random number between 0 and an implementation defined maximum RAND_MAX. RAND_MAX is usually the largest integer value supported by the hardware platform. The numbers that are generated by the rand( ) function are not truly random. Try the following program to see this. 

   #include <iostream>
   #include <cstdlib>
 
   using namespace std;
 
   int main ( )
   {
      for(int i = 0; i < 10; i++)
      {
         cout << rand( ) << endl;
      }
 
      system("PAUSE");
      return 0;
   }


Run this program several times. Notice that the numbers generated by the program appear to be random, but that the same sequence of numbers is generated every time that you run the program. This is because the rand( ) function generates its numbers using a fairly simple formula that actually generates a sequence of numbers that don't repeat for a very long time. To change this sequence you have to give the random number generator a seed. The seed is used by the formula to generate the first random number in the sequence. By changing the seed, you can get different sequences of random numbers. The random number generator is seeded with the function 

   srand(int seed); 

Of course every time you use the same seed, you get the same sequence of numbers. While this method works fine for many simulation problem, such as computing the roll of the dice, keep in mind that the numbers are not truly random. The generation of truly random numbers is beyond the scope of this discussion. 

Ranges of Random Numbers
In real applications, you want to generate random numbers that always lie within in a certain range. In our dice example, the numbers must lie between 1 and 6. How do you get from the numbers generated by the rand( ) function and numbers between 1 and 6? 

Consider two values, a and b. It turns out that there are (b - a) + 1 values between a and b, including the values of a and b. If a = 1, and b = 6 then there are 6 - 1 + 1 = 6 values (1, 2, 3, 4, 5, and 6). 

To get a random number between 0 and b - a compute 

   rand( ) % (b - a + 1); 

Then add that result to a to get a random number between a and b 

Example
Let's code up our dice example to illustrate how to generate random numbers within a range. The following code will generate 10 random dice throws: 

 1   #include <iostream>
 2   #include <cstdlib>
 3   #include <ctime>
 4 
 5   using namespace std;
 6 
 7   int main ( )
 8   {
 9      int seed = static_cast<int>(time(0));
10      srand(seed);
11      for (int i = 0; i < 10; i++)
12      {
13         int d1 = 1 + rand( ) % 6;
14         int d2 = 1 + rand( ) % 6;
15         cout << d1 << " " << d2 << endl;
16      }
17 
18      system("PAUSE");
19      return 0;
20   }


Line 9 is where we get the seed for our random number generator. The function time(0) gets a number from the time-of-day clock in the computer. We then convert that to an integer. Because we used the time-of-day clock, the seed will be different every time we run the program. 

Lines 13 and 14 use the equation we developed earlier to get a random value between a and b, 

   a + rand( ) % (b - a + 1) 

 
