         Programming Exercise: Passing By Value and Passing By Reference
Introduction
In this exercise, you will create a function that passes one of its parameters by value and one by reference. 

The problem
In this exercise, you will write a program that will determine how many coins of each denomination (1¢, 5¢, 10¢, 25¢, and 50¢) are required to make up a given amount of change. For example, to make 57¢ we could use 1 half dollar, 1 nickel, and 2 pennies. 

Deriving the Solution
Given an amount of change to make, it should be obvious that many combinations of coins are possible. In the example above, we could make up 57¢ with: 57 pennies; 5 dimes, a nickel, and 2 pennies; 2 quarters and 7 pennies; and so on. For this exercise let us use an algorithm that figures out how many of the largest denomination coin we need first, and works down through each succeeding coin denomination. This algorithm is described in the following diagram.

 

To see how the algorithm works, let's take our 57¢. First consider how many 50¢ pieces we can get out of 57¢. We could get 1. After taking out the 50¢, we have 7¢ left. Now consider quarters. We can't get any quarters out of 7¢. Then look at dimes. We can't get any dimes out of 7¢ either. Then look at nickels. We can take one nickel out of 7¢. This leaves 2¢, so finally we have two pennies. 

The computeChange( ) Function
If you look carefully at the diagram above, you will notice that the code does the same thing over and over again, but with different values for n and for the coin denomination. Whenever you see this pattern in a program, you should consider writing a function. In this case, you want a function that takes as its inputs n, the amount of change left, and a coin denomination. The function should 

Compute the number of coins of the given denomination it can take out of n, and 
Compute the new value of n, after taking out those coins. 
We now have a problem. We need to return both the number of coins we computed, and the new value of n. However, a function can only return one thing. The solution here is to pass the value of n by reference. When the new value of n is computed, it is computed in place, so we do not need to return the value. We only need to return the computed number of coins. The function prototype for the function would then look like 

    int computeChange(int& changeValue, int coinValue); 

Writing the Code
Download the .cpp file that is located here. Where shown in the code, write the computeChange( ) function, following the steps in the activity diagram above. Write a Function prologue for your function. Include assertions if necessary to test any preconditions. Before compiling your program do a code walkthru as decribed in the reading material for this lab. Test and debug your program as described in lab #4. 

Submitting Your Program
Once you have a working solution, the process for submitting a program for grading is as follows. Failure to follow these instructions when submitting your programs may result in your project not being graded, or being penalized points for missing or incorrect items. Submissions must include 

Your completed worksheet. 
Your source code (.cpp) file and an executable file (.exe). Do not send other files, for example .bpr, .tds, etc. 
Your name, course/section number, instructor name, and date must be included as comments in each source code file. 
Create a zip file containing your source code file (lab07.cpp), your executable file (lab07.exe), and your completed worksheet. Remember that your executable must run in the lab, in order for you to receive a grade on this assignment. If you do not know how to zip a file, consult with one of the tutors or lab assistants. Your zip file must be named as follows:
 
   lab07your-initials.zip
 
So, for example, my zip file would be named 
 
   lab07rkd.zip
 


Upload your zip file to WebCT. 

The gradesheet is located here. 
 
